#!/usr/bin/env node

const download = require('download-git-repo')
const program = require('commander')
const exists = require('fs').existsSync
const path = require('path')
const ora = require('ora')
const home = require('user-home')
const tildify = require('tildify')
const chalk = require('chalk')
const inquirer = require('inquirer')
const rm = require('rimraf').sync
const logger = require('../lib/logger')
const generate = require('../lib/generate')
const checkVersion = require('../lib/check-version')
const warnings = require('../lib/warnings')
const localPath = require('../lib/local-path')

const isLocalPath = localPath.isLocalPath
const getTemplatePath = localPath.getTemplatePath
const log = console.log

/**
 * usage
 */
program.usage('<template-name> [project-name]')
  .option('-c, --clone', 'use git clone')
  .option('--offline', 'use cached template')

/**
 * help
 */
program.on('--help', () => {
  log('  Examples:')
  log()
  log(chalk.gray('    # create a new project with an official template'))
  log('    $ djax init template-name my-project')
  log()
  log(chalk.gray('    # create a new project straight from a github template'))
  log('    $ djax init username/repo my-project')
  log()
})

/**
 * help
 */
function help () {
  program.parse(process.argv)
  if (program.args.length < 1) {
    return program.help()
  }
}
help()

/**
 * settings
 */
let template = program.args[0]
if (/^default($)|(#.+)/.test(template)) {
  template = template.replace(/^default/, 'djax')
}

// 若模板名不含`/`则认为是官方模版
const hasSlash = template.indexOf('/') > -1
const specialProjectNames = [
  'resume',
  'quilt',
  'yxeye',
  'lookjavascript',
  'utils-daily'
]
if (
  !hasSlash &&
  specialProjectNames.indexOf(template) === -1
) {
  template = `djax-template-${template}`
}
const rawName = program.args[1]
const inPlace = !rawName || rawName === '.'
const name = inPlace ? path.relative('../', process.cwd()) : rawName
const to = path.resolve(rawName || '.')
const clone = program.clone || false

const tmp = path.join(home, '.djax-templates', template.replace(/[\/:]/g, '-'))
if (program.offline) {
  console.log(`> Use cached template at ${chalk.yellow(tildify(tmp))}`)
  template = tmp
}

/**
 * padding
 */
log()
process.on('exit', () => {
  log()
})

if (inPlace || exists(to)) {
  inquirer.prompt([
    {
      type: 'confirm',
      message: inPlace
        ? 'Generate project in current directory?'
        : 'Target directory exists. Continue?',
      name: 'ok'
    }
  ]).then(answers => {
    answers.ok && run()
  }).catch(logger.fatal)
} else {
  run()
}

function run () {
  // check if template is local
  if (isLocalPath(template)) {
    const templatePath = getTemplatePath(template)
    if (exists(templatePath)) {
      generate(name, templatePath, to, err => {
        if (err) {
          logger.fatal(err)
        }
        log()
        logger.success('Generated "%s".', name)
      })
    } else {
      logger.fatal('Local template "%s" not found.', template)
    }
  } else {
    checkVersion(() => {
      if (!hasSlash) {
        // use official template
        const officialTemplate = 'Yakima-Teng/' + template
        downloadAndGenerate(officialTemplate)
      } else {
        downloadAndGenerate(template)
      }
    })
  }
}

function downloadAndGenerate (template) {
  const spinner = ora('downloading template')
  spinner.start()
  // Remove if local template exists
  if (exists(tmp)) {
    rm(tmp)
  }
  download(template, tmp, { clone }, err => {
    spinner.stop()
    err && logger.fatal('Failed to download repo ' + template + ': ' + err.message.trim())
    generate(name, tmp, to, err => {
      err && logger.fatal(err)
      log()
      logger.success('Generated "%s"', name)
    })
  })
}
